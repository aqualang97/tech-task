/*
 * Go Restful API with Swagger
 * Simple swagger implementation in Go HTTP
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: aqualang9797@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsDataParse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataApi {
    private ApiClient localVarApiClient;

    public DataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for downloadGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = downloadGetCall(_callback);
        return localVarCall;

    }

    /**
     * Download .csv file with link what hardcode in app.
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void downloadGet() throws ApiException {
        downloadGetWithHttpInfo();
    }

    /**
     * Download .csv file with link what hardcode in app.
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> downloadGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = downloadGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download .csv file with link what hardcode in app. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchGet
     * @param transaction Search transaction by transaction ID. You can use several IDs to see several transaction (like transaction&#x3D;1,2,10 ). This parameter is incompatible with other. (optional)
     * @param terminal Search transaction by terminal ID. You can use several IDs to see several transaction (like transaction&#x3D;3507,3510 ). This parameter is incompatible with other. (optional)
     * @param status Search transaction by status. You can use several statuses to see several transaction (like transaction&#x3D;accepted,declined ). This parameter is incompatible with other. (optional)
     * @param payment Search transaction by payment type. You can use several types to see several transaction (like transaction&#x3D;cash,card ). This parameter is incompatible with other. (optional)
     * @param dateFrom Search transaction in the selected date interval. Must be used together with &#x60;dateTo&#x60; and is incompatible with other. (optional)
     * @param dateTo Search transaction in the selected date interval. Must be used together with &#x60;dateFrom&#x60; and is incompatible with other. (optional)
     * @param narrative Search transaction by partially specified payment narrative. This parameter is incompatible with other. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchGetCall(Integer transaction, Integer terminal, String status, String payment, String dateFrom, String dateTo, String narrative, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transaction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction", transaction));
        }

        if (terminal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("terminal", terminal));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (payment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payment", payment));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTo", dateTo));
        }

        if (narrative != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("narrative", narrative));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchGetValidateBeforeCall(Integer transaction, Integer terminal, String status, String payment, String dateFrom, String dateTo, String narrative, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchGetCall(transaction, terminal, status, payment, dateFrom, dateTo, narrative, _callback);
        return localVarCall;

    }

    /**
     * Get transaction items
     * 
     * @param transaction Search transaction by transaction ID. You can use several IDs to see several transaction (like transaction&#x3D;1,2,10 ). This parameter is incompatible with other. (optional)
     * @param terminal Search transaction by terminal ID. You can use several IDs to see several transaction (like transaction&#x3D;3507,3510 ). This parameter is incompatible with other. (optional)
     * @param status Search transaction by status. You can use several statuses to see several transaction (like transaction&#x3D;accepted,declined ). This parameter is incompatible with other. (optional)
     * @param payment Search transaction by payment type. You can use several types to see several transaction (like transaction&#x3D;cash,card ). This parameter is incompatible with other. (optional)
     * @param dateFrom Search transaction in the selected date interval. Must be used together with &#x60;dateTo&#x60; and is incompatible with other. (optional)
     * @param dateTo Search transaction in the selected date interval. Must be used together with &#x60;dateFrom&#x60; and is incompatible with other. (optional)
     * @param narrative Search transaction by partially specified payment narrative. This parameter is incompatible with other. (optional)
     * @return ModelsDataParse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelsDataParse searchGet(Integer transaction, Integer terminal, String status, String payment, String dateFrom, String dateTo, String narrative) throws ApiException {
        ApiResponse<ModelsDataParse> localVarResp = searchGetWithHttpInfo(transaction, terminal, status, payment, dateFrom, dateTo, narrative);
        return localVarResp.getData();
    }

    /**
     * Get transaction items
     * 
     * @param transaction Search transaction by transaction ID. You can use several IDs to see several transaction (like transaction&#x3D;1,2,10 ). This parameter is incompatible with other. (optional)
     * @param terminal Search transaction by terminal ID. You can use several IDs to see several transaction (like transaction&#x3D;3507,3510 ). This parameter is incompatible with other. (optional)
     * @param status Search transaction by status. You can use several statuses to see several transaction (like transaction&#x3D;accepted,declined ). This parameter is incompatible with other. (optional)
     * @param payment Search transaction by payment type. You can use several types to see several transaction (like transaction&#x3D;cash,card ). This parameter is incompatible with other. (optional)
     * @param dateFrom Search transaction in the selected date interval. Must be used together with &#x60;dateTo&#x60; and is incompatible with other. (optional)
     * @param dateTo Search transaction in the selected date interval. Must be used together with &#x60;dateFrom&#x60; and is incompatible with other. (optional)
     * @param narrative Search transaction by partially specified payment narrative. This parameter is incompatible with other. (optional)
     * @return ApiResponse&lt;ModelsDataParse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsDataParse> searchGetWithHttpInfo(Integer transaction, Integer terminal, String status, String payment, String dateFrom, String dateTo, String narrative) throws ApiException {
        okhttp3.Call localVarCall = searchGetValidateBeforeCall(transaction, terminal, status, payment, dateFrom, dateTo, narrative, null);
        Type localVarReturnType = new TypeToken<ModelsDataParse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transaction items (asynchronously)
     * 
     * @param transaction Search transaction by transaction ID. You can use several IDs to see several transaction (like transaction&#x3D;1,2,10 ). This parameter is incompatible with other. (optional)
     * @param terminal Search transaction by terminal ID. You can use several IDs to see several transaction (like transaction&#x3D;3507,3510 ). This parameter is incompatible with other. (optional)
     * @param status Search transaction by status. You can use several statuses to see several transaction (like transaction&#x3D;accepted,declined ). This parameter is incompatible with other. (optional)
     * @param payment Search transaction by payment type. You can use several types to see several transaction (like transaction&#x3D;cash,card ). This parameter is incompatible with other. (optional)
     * @param dateFrom Search transaction in the selected date interval. Must be used together with &#x60;dateTo&#x60; and is incompatible with other. (optional)
     * @param dateTo Search transaction in the selected date interval. Must be used together with &#x60;dateFrom&#x60; and is incompatible with other. (optional)
     * @param narrative Search transaction by partially specified payment narrative. This parameter is incompatible with other. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchGetAsync(Integer transaction, Integer terminal, String status, String payment, String dateFrom, String dateTo, String narrative, final ApiCallback<ModelsDataParse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchGetValidateBeforeCall(transaction, terminal, status, payment, dateFrom, dateTo, narrative, _callback);
        Type localVarReturnType = new TypeToken<ModelsDataParse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
